/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TIMERVIEWBASE_HPP
#define TIMERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/timer_screen/TimerPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Shape.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class TimerViewBase : public touchgfx::View<TimerPresenter>
{
public:
    TimerViewBase();
    virtual ~TimerViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void StartTimerToggleFunction()
    {
        // Override and implement this function in Timer
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box bgS2;
    touchgfx::TextAreaWithOneWildcard timer_min_text;
    touchgfx::TextArea seperator_1;
    touchgfx::TextAreaWithOneWildcard timer_sec_text;
    touchgfx::Shape<4> shape1;
    touchgfx::PainterRGB565 shape1Painter;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonTomato;
    touchgfx::ToggleButton start_timer_toggleButton;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  go_to_screen1_flexButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TIMER_MIN_TEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar timer_min_textBuffer[TIMER_MIN_TEXT_SIZE];
    static const uint16_t TIMER_SEC_TEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar timer_sec_textBuffer[TIMER_SEC_TEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TimerViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<TimerViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TIMERVIEWBASE_HPP
