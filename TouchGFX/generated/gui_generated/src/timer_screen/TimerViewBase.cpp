/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/timer_screen/TimerViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

TimerViewBase::TimerViewBase() :
    flexButtonCallback(this, &TimerViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &TimerViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    bgS2.setPosition(0, 0, 240, 320);
    bgS2.setColor(touchgfx::Color::getColorFromRGB(240, 91, 86));
    add(bgS2);

    timer_min_text.setXY(31, 114);
    timer_min_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    timer_min_text.setLinespacing(0);
    Unicode::snprintf(timer_min_textBuffer, TIMER_MIN_TEXT_SIZE, "%s", touchgfx::TypedText(T_WILD_TIMER_MIN).getText());
    timer_min_text.setWildcard(timer_min_textBuffer);
    timer_min_text.resizeToCurrentText();
    timer_min_text.setTypedText(touchgfx::TypedText(T_TIMER_MIN));
    add(timer_min_text);

    seperator_1.setXY(120, 143);
    seperator_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    seperator_1.setLinespacing(0);
    seperator_1.setTypedText(touchgfx::TypedText(T_SEPARATORS2));
    add(seperator_1);

    timer_sec_text.setXY(133, 114);
    timer_sec_text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    timer_sec_text.setLinespacing(0);
    Unicode::snprintf(timer_sec_textBuffer, TIMER_SEC_TEXT_SIZE, "%s", touchgfx::TypedText(T_WILD_TIMER_SEC).getText());
    timer_sec_text.setWildcard(timer_sec_textBuffer);
    timer_sec_text.resizeToCurrentText();
    timer_sec_text.setTypedText(touchgfx::TypedText(T_TIMER_SEC));
    add(timer_sec_text);

    shape1.setPosition(51, 6, 101, 84);
    shape1.setOrigin(0.0f, 0.0f);
    shape1.setScale(1.0f, 1.0f);
    shape1.setAngle(0.0f);
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    shape1.setPainter(shape1Painter);
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 80.0f, 80.0f }, { 10.0f, 38.8f } };
    shape1.setShape(shape1Points);
    add(shape1);

    flexButtonTomato.setBitmaps(Bitmap(BITMAP_TOMATO_ID), Bitmap(BITMAP_TOMATO_ID));
    flexButtonTomato.setBitmapXY(0, 0);
    flexButtonTomato.setPosition(88, 26, 64, 64);
    add(flexButtonTomato);

    start_timer_toggleButton.setXY(62, 221);
    start_timer_toggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_TOGGLEBARS_TOGGLE_LARGE_BUTTON_ON_ID));
    start_timer_toggleButton.setAction(buttonCallback);
    add(start_timer_toggleButton);

    go_to_screen1_flexButton.setBitmaps(Bitmap(BITMAP_DARK_PAGEINDICATOR_DOT_INDICATOR_LARGE_NORMAL_ID), Bitmap(BITMAP_DARK_PAGEINDICATOR_DOT_INDICATOR_LARGE_HIGHLIGHT_ID));
    go_to_screen1_flexButton.setBitmapXY(0, 0);
    go_to_screen1_flexButton.setAction(flexButtonCallback);
    go_to_screen1_flexButton.setPosition(196, 276, 44, 44);
    add(go_to_screen1_flexButton);
}

TimerViewBase::~TimerViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void TimerViewBase::setupScreen()
{

}

void TimerViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &go_to_screen1_flexButton)
    {
        //startTimerON
        //When go_to_screen1_flexButton clicked change screen to Main
        //Go to Main with block transition
        application().gotoMainScreenBlockTransition();
    }
}

void TimerViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &start_timer_toggleButton)
    {
        //StartTimerToggleInteraction
        //When start_timer_toggleButton clicked call virtual function
        //Call StartTimerToggleFunction
        StartTimerToggleFunction();
    }
}
